#!/bin/sh -e
# {# jinja-parse #}
INSTALL_PREFIX={{INSTALL_PREFIX}}

START=961

PID_FILE=/var/run/dm.pid
BIN_DIR=${INSTALL_PREFIX}/bin

opensync_service_enabled()
{
    true
}

opensync_post_start()
{
    true
}

opensync_post_stop()
{
    true
}

opensync_dm_running()
{
    start-stop-daemon -K -t -p $PID_FILE -x ${BIN_DIR}/dm
}

opensync_dm_start()
{
    {% if 'CONFIG_MANAGER_PSM' in KCONFIG_ALL -%}
    # Restore persistent tables before DM starts
    {{INSTALL_PREFIX}}/bin/psm --restore
    {% endif -%}
    start-stop-daemon -S -p $PID_FILE -x ${BIN_DIR}/dm -b -m
}

# Writes information related to the OpenSync restart into a designated crash file
# directory which is later reported to the cloud by DM's crash reporting module
dump_manager_restart()
{
    {% if CONFIG_DM_OSYNC_CRASH_REPORTS %}
    CRASH_REPORTS_TMP_DIR={{CONFIG_DM_CRASH_REPORTS_TMP_DIR}}
    NOT_AVAILABLE_STR="<NA>"

    mkdir -m 755 -p "$CRASH_REPORTS_TMP_DIR"
    crashfile=$(mktemp "$CRASH_REPORTS_TMP_DIR/crashed_XXXXXX")

    # Append manager restart data to crash file in the same format as in os_backtrace
    echo "pid $NOT_AVAILABLE_STR" > $crashfile
    echo "name OpenSync" >> $crashfile
    echo "reason OpenSync restarted by $(readlink -f ${0})" >> $crashfile
    echo "timestamp $(date +%s | awk '{print $1 * 1000}')" >> $crashfile  # multiply by 1000 because time in ms is expected
    echo "backtrace $NOT_AVAILABLE_STR" >> $crashfile
    {% else %}
    :
    {% endif %}
}

# include functions.sh after the above function definitions
# so that they can be overrided with platform specifics

. /lib/opensync_functions.sh

start()
{
    if opensync_service_enabled
    then
        sh -x ${BIN_DIR}/start.sh 2>&1 | logger -t start.sh
        opensync_dm_start
    fi
    opensync_post_start
}

stop()
{
    if opensync_service_enabled
    then
        sh -x ${BIN_DIR}/stop.sh 2>&1 | logger -t stop.sh
    fi
    opensync_post_stop
}

case "$1" in
    boot) start ;;
    start) opensync_dm_running || start ;;
    stop) stop ;;
    restart) "$0" stop && "$0" start && dump_manager_restart;;
    *) exit 1 ;;
esac
