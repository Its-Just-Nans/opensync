// Copyright (c) 2015, Plume Design Inc. All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//    1. Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//    2. Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//    3. Neither the name of the Plume Design Inc. nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL Plume Design Inc. BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

package interfaces.adt;

// network attributes identified as necessary and represented as enums
// for performance purposes
enum AdtEnumAttrs {
  ADT_ATTR_UNSPECIFIED = 0;
  ADT_ATTR_DHCPV6_DUID = 1;
}

// The key is either an enum or a string
message AdtAttrKey {
  AdtEnumAttrs attr = 1;
  string adt_key = 2;
};

// The value is either a byte array or a string
message AdtAttrValue {
  bytes byte_value = 1;
  string string_value = 2;
}

message AdtKVPair {
  AdtAttrKey key = 1;
  AdtAttrValue value = 2;
}

message AdtIpv4Tuple {
  uint32 source_ipv4 = 1;
  uint32 destination_ipv4 = 2;
  uint32 transport = 3;
  uint32 source_port = 4;
  uint32 destination_port = 5;
}

message AdtIpv6Tuple {
  bytes source_ipv6 = 1;
  bytes destination_ipv6 = 2;
  uint32 transport = 3;
  uint32 source_port = 4;
  uint32 destination_port = 5;
}

message AdtDataPoint
{
  bytes device_id = 1;
  uint32 ethertype = 2;
  AdtIpv4Tuple ipv4_tuple = 3;
  AdtIpv6Tuple ipv6_tuple = 4;
  repeated AdtKVPair kv_pair = 5;
}

message AdtObservationPoint {
  string node_id = 1;
  string location_id = 2;
}

message AdtReport
{
  AdtObservationPoint observation_point = 1;
  repeated AdtDataPoint data = 2;
}
