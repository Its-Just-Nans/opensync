// Copyright (c) 2015, Plume Design Inc. All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//    1. Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//    2. Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//    3. Neither the name of the Plume Design Inc. nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL Plume Design Inc. BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

package interfaces.lte_info;

// LTE common fields
message LteCommonHeader {
  uint32 request_id = 1;
  string if_name = 2; // wwan0
  string node_id = 3;
  string location_id = 4;
  string imei = 5;
  string imsi = 6;
  string iccid = 7;
  uint64 reported_at = 8; // Unix time in seconds
}

// Network Registration Status
enum LteNetRegStatus {
  LTE_NET_REG_STAT_UNSPECIFIED = 0;
  LTE_NET_REG_STAT_NOTREG = 1; // Not registered. ME is not currently searching a new operator to register to
  LTE_NET_REG_STAT_REG = 2; // Registered, home network
  LTE_NET_REG_STAT_SEARCH = 3; // Not registered, but ME is currently searching a new operator to register to
  LTE_NET_REG_STAT_DENIED = 4; // Registration denied
  LTE_NET_REG_STAT_UNKNOWN = 5; // Unknown
  LTE_NET_REG_STAT_ROAMING = 6; // Registered, roaming
}

// SIM type (eSIM, physical SIM)
enum LteSimType {
  LTE_SIM_TYPE_UNSPECIFIED = 0; // No SIM present
  LTE_SIM_TYPE_ESIM = 1;
  LTE_SIM_TYPE_PSIM = 2; // Physical SIM card
}

// SIM Status (Inserted, Removed, Unknown)
enum LteSimStatus {
  LTE_SIM_STATUS_UNSPECIFIED = 0;
  LTE_SIM_STATUS_INSERTED = 1;
  LTE_SIM_STATUS_REMOVED = 2;
  LTE_SIM_STATUS_BAD = 3;
}

message LteNetInfo {
  LteNetRegStatus net_status = 1;
  uint32 mcc = 2;
  uint32 mnc = 3;
  uint32 tac = 4;
  string service_provider = 5;
  LteSimType sim_type = 6;
  LteSimStatus sim_status = 7;
  uint32 active_sim_slot = 8;
  int32 rssi = 9;
  int32 ber = 10;
  uint64 last_healthcheck_success = 13; // Unix time in seconds
  uint64 healthcheck_failures = 14;
}

// LTE data usage
message LteDataUsage {
  uint64 rx_bytes = 1;
  uint64 tx_bytes = 2;
  uint64 failover_start = 3; // Unix time in seconds
  uint64 failover_end = 4; // Unix time in seconds
  uint32 failover_count = 5;
}

// Serving Cell State
enum LteServingCellState {
  LTE_SERVING_CELL_UNSPECIFIED = 0;
  LTE_SERVING_CELL_SEARCH = 1; // UE is searching but could not (yet) find a suitable 3G/4G cell.
  LTE_SERVING_CELL_LIMSERV = 2; // UE is camping on a cell but has not registered on the network.
  LTE_SERVING_CELL_NOCONN = 3; // UE is camping on a cell and has registered on the network, and it is in idle mode.
  LTE_SERVING_CELL_CONNECT = 4; // UE is camping on a cell and has registered on the network, and a call is in progress.
}

// cell mode
enum LteCellMode {
  LTE_CELL_MODE_UNSPECIFIED = 0;
  LTE_CELL_MODE_LTE = 1;
  LTE_CELL_MODE_WCDMA = 2;
}

// is_tdd
enum LteFddTddMode {
  LTE_MODE_UNSPECIFIED = 0;
  LTE_MODE_FDD = 1;
  LTE_MODE_TDD = 2;
}

// Uplink/Downlink Bandwidth in MHz
enum LteBandwidth {
  LTE_BANDWIDTH_UNSPECIFIED = 0;
  LTE_BANDWIDTH_1P4_MHZ = 1;
  LTE_BANDWIDTH_3_MHZ = 2;
  LTE_BANDWIDTH_5_MHZ = 3;
  LTE_BANDWIDTH_10_MHZ = 4;
  LTE_BANDWIDTH_15_MHZ = 5;
  LTE_BANDWIDTH_20_MHZ = 6;
}

message LteNetServingCellInfo {
  LteServingCellState state = 1;
  LteCellMode mode = 2;
  LteFddTddMode fdd_tdd_mode = 3;
  uint32 cellid = 4; // Hexadecimal format. Cell ID. The parameter determines the 16-bit (GSM) or 28-bit (UMTS) cell ID. Range: 0-0xFFFFFFF.
  uint32 pcid = 5; // Physical cell ID
  uint32 uarfcn = 6; // Number format. The parameter determines the UTRA-ARFCN of the cell that was scanned
  uint32 earfcn = 7; // Number format. The parameter determines the E-UTRA-ARFCN of the cell that was scanned
  uint32 freq_band = 8; // E-UTRA frequency band (see 3GPP 36.101)
  LteBandwidth ul_bandwidth = 9;
  LteBandwidth dl_bandwidth = 10;
  uint32 tac = 11; // Tracking Area Code (see 3GPP 23.003 Section 19.4.2.3)
  int32 rsrp = 12; // Reference Signal Received Power (see 3GPP 36.214 Section 5.1.1)
  int32 rsrq = 13; // Reference Signal Received Quality (see 3GPP 36.214 Section 5.1.2)
  int32 rssi = 14; // The parameter shows the Received Signal Strength Indication
  uint32 sinr = 15; // Logarithmic value of SINR, Values are in 1/5th of a dB. Range: 0-250 which translates to -20dB - +30dB
  uint32 srxlev = 16; // Select receive level value for base station in dB (see 3GPP25.304).
}

// NeighborCell freq mode
enum LteNeighborFreqMode {
  LTE_FREQ_MODE_UNSPECIFIED = 0;
  LTE_FREQ_MODE_INTRA = 1;
  LTE_FREQ_MODE_INTER = 2;
  LTE_FREQ_MODE_WCDMA = 3;
  LTE_FREQ_MODE_WCDMA_LTE = 4;
}

// Set
enum LteNeighborCellSet {
  LTE_NEIGHBOR_CELL_SET_UNSPECIFIED = 0;
  LTE_NEIGHBOR_CELL_SET_ACTIVE_SET = 1;
  LTE_NEIGHBOR_CELL_SET_SYNC_NEIGHBOR = 2;
  LTE_NEIGHBOR_CELL_SET_ASYNC_NEIGHBOR = 3;
}

// [+QENG: "neighbourcell intra","LTE",<earfcn>,<pcid>,<rsrq>,<rsrp>,<rssi>,<sinr>,<srxlev>,<cell_resel_priority>,<s_non_intra_search>,<thresh_serving_low>,<s_intra_search>
// [+QENG: "neighbourcell inter","LTE",<earfcn>,<pcid>,<rsrq>,<rsrp>,<rssi>,<sinr>,<srxlev>,<cell_resel_priority>,<threshX_low>,<threshX_high>
// [+QENG:"neighbourcell","WCDMA",<uarfcn>,<cell_resel_priority>,<thresh_Xhigh>,<thresh_Xlow>,<psc>,<rscp><ecno>,<srxlev>
// [+QENG: "neighbourcell","LTE",<earfcn>,<cellid>,<rsrp>,<rsrq>,<s_rxlev>
message LteNetNeighborCellInfo {
  LteCellMode mode = 1;
  LteNeighborFreqMode freq_mode = 2;
  uint32 earfcn = 3;
  uint32 uarfcn = 4;
  uint32 pcid = 5;
  int32 rsrq = 6;
  int32 rsrp = 7;
  int32 rssi = 8;
  uint32 sinr = 9;
  uint32 srxlev = 10;
  uint32 cell_resel_priority = 11; // Cell reselection priority. Range: 0-7
  uint32 s_non_intra_search = 12; // Threshold to control non-intra frequency searches.
  uint32 thresh_serving_low = 13; //Specifies the suitable receive level threshold (in dB) used by the UE on the serving cell when reselecting towards a lower priority RAT/frequency.
  uint32 s_intra_search = 14; // Cell selection parameter for the intra frequency cell.
  uint32 thresh_x_low = 15; // The suitable receive level value of an evaluated lower priority cell must be greater than this value.
  uint32 thresh_x_high = 16; // The suitable receive level value of an evaluated higher priority cell must be greater than this value.
  uint32 psc = 17; //The parameter determines the primary scrambling code of the cell that was scanned
  int32 rscp = 18; // The parameter determines the Received Signal Code Power level of the cell that was scanned
  int32 ecno = 19; // Carrier to noise ratio in dB = measured Ec/Io value in dB.
  LteNeighborCellSet cell_set = 20; // 3G neighbour cell set
  int32 rank = 21; // Rank of this cell as neighbour for inter-RAT cell reselection
  uint32 cellid = 22; // Hexadecimal format. Cell ID. The parameter determines the 16-bit (GSM) or 28-bit (UMTS) cell ID. Range: 0-0xFFFFFFF.
  int32 inter_freq_srxlev = 23; // Suitable receive level for inter frequency cell
}

enum LtePcellState {
    LTE_NO_SERVING = 0;
    LTE_REGISTERED = 1;
}

enum LteScellState {
    LTE_DECONFIGURED = 0;
    LTE_CONFIGURED_DEACTIVATED = 1;
    LTE_CONFIGURERD_ACTIVATED = 2;
}

enum LteCarrierComponent {
    LTE_CC_UNAVAILABLE = 0;
    LTE_PCC = 1;
    LTE_SCC = 2;
}

message LteNetCarrierAggInfo {
    LteCarrierComponent lte_carrier_component = 1;
    uint32 freq = 2;
    LteBandwidth bandwidth = 3;
    LtePcellState pcell_state = 4;
    LteScellState scell_state = 5;
    uint32 pcid = 6;
    int32 rsrp = 7;
    int32 rsrq = 8;
    int32 rssi = 9;
    int32 sinr = 10;
}

message LtePDPContextInfo {
    uint32 cid = 1;
    uint32 bearer_id = 2;
    string apn = 3;
    string local_addr = 4;
    string subnetmask = 5;
    string gw_addr = 6;
    string dns_prim_addr = 7;
    string dns_sec_addr = 8;
    string p_cscf_prim_addr = 9;
    string p_cscf_sec_addr = 10;
    uint32 im_cn_signalling_flag = 11;
    uint32 lipaindication = 12;
}

// LTE info
message LteInfoReport {

  LteCommonHeader header = 1;

  // LTE info
  LteNetInfo lte_net_info = 2;

  // Data usage
  LteDataUsage lte_data_usage = 3;

  // Serving cell info
  LteNetServingCellInfo lte_srv_cell = 4;

  // Neighbor cell info
  repeated LteNetNeighborCellInfo lte_neigh_cell_info = 5;

  // Carrier aggregation
  LteNetCarrierAggInfo lte_primary_carrier_agg_info = 6;
  LteNetCarrierAggInfo lte_secondary_carrier_agg_info = 7;

  // PDP context info
  LtePDPContextInfo lte_pdp_context = 8;
}
