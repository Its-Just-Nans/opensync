/*
Copyright (c) 2015, Plume Design Inc. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
   1. Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
   2. Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
   3. Neither the name of the Plume Design Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Plume Design Inc. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: dpi_stats.proto */

#ifndef PROTOBUF_C_dpi_5fstats_2eproto__INCLUDED
#define PROTOBUF_C_dpi_5fstats_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Interfaces__DpiStats__DpiStatsObservationPoint Interfaces__DpiStats__DpiStatsObservationPoint;
typedef struct _Interfaces__DpiStats__DpiStatsCounters Interfaces__DpiStats__DpiStatsCounters;
typedef struct _Interfaces__DpiStats__DpiStatsReport Interfaces__DpiStats__DpiStatsReport;


/* --- enums --- */


/* --- messages --- */

struct  _Interfaces__DpiStats__DpiStatsObservationPoint
{
  ProtobufCMessage base;
  char *node_id;
  char *location_id;
};
#define INTERFACES__DPI_STATS__DPI_STATS_OBSERVATION_POINT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&interfaces__dpi_stats__dpi_stats_observation_point__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Interfaces__DpiStats__DpiStatsCounters
{
  ProtobufCMessage base;
  uint32_t curr_alloc;
  uint32_t peak_alloc;
  uint32_t fail_alloc;
  uint32_t mpmc_events;
  uint32_t scan_started;
  uint32_t scan_stopped;
  uint32_t scan_bytes;
  uint32_t err_incomplete;
  uint32_t err_length;
  uint32_t err_create;
  uint32_t err_scan;
  uint32_t connections;
  uint32_t streams;
};
#define INTERFACES__DPI_STATS__DPI_STATS_COUNTERS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&interfaces__dpi_stats__dpi_stats_counters__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _Interfaces__DpiStats__DpiStatsReport
{
  ProtobufCMessage base;
  Interfaces__DpiStats__DpiStatsObservationPoint *observation_point;
  char *plugin;
  Interfaces__DpiStats__DpiStatsCounters *counters;
};
#define INTERFACES__DPI_STATS__DPI_STATS_REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&interfaces__dpi_stats__dpi_stats_report__descriptor) \
    , NULL, (char *)protobuf_c_empty_string, NULL }


/* Interfaces__DpiStats__DpiStatsObservationPoint methods */
void   interfaces__dpi_stats__dpi_stats_observation_point__init
                     (Interfaces__DpiStats__DpiStatsObservationPoint         *message);
size_t interfaces__dpi_stats__dpi_stats_observation_point__get_packed_size
                     (const Interfaces__DpiStats__DpiStatsObservationPoint   *message);
size_t interfaces__dpi_stats__dpi_stats_observation_point__pack
                     (const Interfaces__DpiStats__DpiStatsObservationPoint   *message,
                      uint8_t             *out);
size_t interfaces__dpi_stats__dpi_stats_observation_point__pack_to_buffer
                     (const Interfaces__DpiStats__DpiStatsObservationPoint   *message,
                      ProtobufCBuffer     *buffer);
Interfaces__DpiStats__DpiStatsObservationPoint *
       interfaces__dpi_stats__dpi_stats_observation_point__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   interfaces__dpi_stats__dpi_stats_observation_point__free_unpacked
                     (Interfaces__DpiStats__DpiStatsObservationPoint *message,
                      ProtobufCAllocator *allocator);
/* Interfaces__DpiStats__DpiStatsCounters methods */
void   interfaces__dpi_stats__dpi_stats_counters__init
                     (Interfaces__DpiStats__DpiStatsCounters         *message);
size_t interfaces__dpi_stats__dpi_stats_counters__get_packed_size
                     (const Interfaces__DpiStats__DpiStatsCounters   *message);
size_t interfaces__dpi_stats__dpi_stats_counters__pack
                     (const Interfaces__DpiStats__DpiStatsCounters   *message,
                      uint8_t             *out);
size_t interfaces__dpi_stats__dpi_stats_counters__pack_to_buffer
                     (const Interfaces__DpiStats__DpiStatsCounters   *message,
                      ProtobufCBuffer     *buffer);
Interfaces__DpiStats__DpiStatsCounters *
       interfaces__dpi_stats__dpi_stats_counters__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   interfaces__dpi_stats__dpi_stats_counters__free_unpacked
                     (Interfaces__DpiStats__DpiStatsCounters *message,
                      ProtobufCAllocator *allocator);
/* Interfaces__DpiStats__DpiStatsReport methods */
void   interfaces__dpi_stats__dpi_stats_report__init
                     (Interfaces__DpiStats__DpiStatsReport         *message);
size_t interfaces__dpi_stats__dpi_stats_report__get_packed_size
                     (const Interfaces__DpiStats__DpiStatsReport   *message);
size_t interfaces__dpi_stats__dpi_stats_report__pack
                     (const Interfaces__DpiStats__DpiStatsReport   *message,
                      uint8_t             *out);
size_t interfaces__dpi_stats__dpi_stats_report__pack_to_buffer
                     (const Interfaces__DpiStats__DpiStatsReport   *message,
                      ProtobufCBuffer     *buffer);
Interfaces__DpiStats__DpiStatsReport *
       interfaces__dpi_stats__dpi_stats_report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   interfaces__dpi_stats__dpi_stats_report__free_unpacked
                     (Interfaces__DpiStats__DpiStatsReport *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Interfaces__DpiStats__DpiStatsObservationPoint_Closure)
                 (const Interfaces__DpiStats__DpiStatsObservationPoint *message,
                  void *closure_data);
typedef void (*Interfaces__DpiStats__DpiStatsCounters_Closure)
                 (const Interfaces__DpiStats__DpiStatsCounters *message,
                  void *closure_data);
typedef void (*Interfaces__DpiStats__DpiStatsReport_Closure)
                 (const Interfaces__DpiStats__DpiStatsReport *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor interfaces__dpi_stats__dpi_stats_observation_point__descriptor;
extern const ProtobufCMessageDescriptor interfaces__dpi_stats__dpi_stats_counters__descriptor;
extern const ProtobufCMessageDescriptor interfaces__dpi_stats__dpi_stats_report__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_dpi_5fstats_2eproto__INCLUDED */
