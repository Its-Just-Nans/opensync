/*
Copyright (c) 2015, Plume Design Inc. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
   1. Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
   2. Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
   3. Neither the name of the Plume Design Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Plume Design Inc. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: gatekeeper_hero_stats.proto */

#ifndef PROTOBUF_C_gatekeeper_5fhero_5fstats_2eproto__INCLUDED
#define PROTOBUF_C_gatekeeper_5fhero_5fstats_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Gatekeeper__HeroStats__HeroObservationPoint Gatekeeper__HeroStats__HeroObservationPoint;
typedef struct _Gatekeeper__HeroStats__HeroHostname Gatekeeper__HeroStats__HeroHostname;
typedef struct _Gatekeeper__HeroStats__HeroUrl Gatekeeper__HeroStats__HeroUrl;
typedef struct _Gatekeeper__HeroStats__HeroIpv4 Gatekeeper__HeroStats__HeroIpv4;
typedef struct _Gatekeeper__HeroStats__HeroIpv6 Gatekeeper__HeroStats__HeroIpv6;
typedef struct _Gatekeeper__HeroStats__HeroApp Gatekeeper__HeroStats__HeroApp;
typedef struct _Gatekeeper__HeroStats__HeroIpv4FlowTuple Gatekeeper__HeroStats__HeroIpv4FlowTuple;
typedef struct _Gatekeeper__HeroStats__HeroIpv6FlowTuple Gatekeeper__HeroStats__HeroIpv6FlowTuple;
typedef struct _Gatekeeper__HeroStats__HeroStats Gatekeeper__HeroStats__HeroStats;
typedef struct _Gatekeeper__HeroStats__HeroObservationWindow Gatekeeper__HeroStats__HeroObservationWindow;
typedef struct _Gatekeeper__HeroStats__HeroReport Gatekeeper__HeroStats__HeroReport;


/* --- enums --- */

typedef enum _Gatekeeper__HeroStats__HeroActions {
  GATEKEEPER__HERO_STATS__HERO_ACTIONS__HERO_ACTION_UNSPECIFIED = 0,
  GATEKEEPER__HERO_STATS__HERO_ACTIONS__HERO_ACTION_ALLOW = 1,
  GATEKEEPER__HERO_STATS__HERO_ACTIONS__HERO_ACTION_BLOCK = 2,
  GATEKEEPER__HERO_STATS__HERO_ACTIONS__HERO_ACTION_REDIRECT = 3,
  GATEKEEPER__HERO_STATS__HERO_ACTIONS__HERO_ACTION_FORWARD = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GATEKEEPER__HERO_STATS__HERO_ACTIONS)
} Gatekeeper__HeroStats__HeroActions;
typedef enum _Gatekeeper__HeroStats__HeroDirections {
  GATEKEEPER__HERO_STATS__HERO_DIRECTIONS__HERO_DIR_UNSPECIFIED = 0,
  GATEKEEPER__HERO_STATS__HERO_DIRECTIONS__HERO_DIR_INBOUND = 1,
  GATEKEEPER__HERO_STATS__HERO_DIRECTIONS__HERO_DIR_OUTBOUND = 2,
  GATEKEEPER__HERO_STATS__HERO_DIRECTIONS__HERO_DIR_LAN2LAN = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GATEKEEPER__HERO_STATS__HERO_DIRECTIONS)
} Gatekeeper__HeroStats__HeroDirections;

/* --- messages --- */

struct  _Gatekeeper__HeroStats__HeroObservationPoint
{
  ProtobufCMessage base;
  char *node_id;
  char *location_id;
};
#define GATEKEEPER__HERO_STATS__HERO_OBSERVATION_POINT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gatekeeper__hero_stats__hero_observation_point__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * FQDN/SNI/HTTP_HOST stats
 */
struct  _Gatekeeper__HeroStats__HeroHostname
{
  ProtobufCMessage base;
  char *name;
  uint64_t count_fqdn;
  uint64_t count_host;
  uint64_t count_sni;
};
#define GATEKEEPER__HERO_STATS__HERO_HOSTNAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gatekeeper__hero_stats__hero_hostname__descriptor) \
    , (char *)protobuf_c_empty_string, 0, 0, 0 }


/*
 * HTTP URL stats
 */
struct  _Gatekeeper__HeroStats__HeroUrl
{
  ProtobufCMessage base;
  char *url;
  uint64_t count;
};
#define GATEKEEPER__HERO_STATS__HERO_URL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gatekeeper__hero_stats__hero_url__descriptor) \
    , (char *)protobuf_c_empty_string, 0 }


/*
 * IPv4 stats
 */
struct  _Gatekeeper__HeroStats__HeroIpv4
{
  ProtobufCMessage base;
  uint32_t addr_ipv4;
  uint64_t count;
};
#define GATEKEEPER__HERO_STATS__HERO_IPV4__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gatekeeper__hero_stats__hero_ipv4__descriptor) \
    , 0, 0 }


/*
 * IPv6 stats
 */
struct  _Gatekeeper__HeroStats__HeroIpv6
{
  ProtobufCMessage base;
  ProtobufCBinaryData addr_ipv6;
  uint64_t count;
};
#define GATEKEEPER__HERO_STATS__HERO_IPV6__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gatekeeper__hero_stats__hero_ipv6__descriptor) \
    , {0,NULL}, 0 }


/*
 * App stats
 */
struct  _Gatekeeper__HeroStats__HeroApp
{
  ProtobufCMessage base;
  char *name;
  uint64_t count;
};
#define GATEKEEPER__HERO_STATS__HERO_APP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gatekeeper__hero_stats__hero_app__descriptor) \
    , (char *)protobuf_c_empty_string, 0 }


/*
 * IPv4 tuple stats
 */
struct  _Gatekeeper__HeroStats__HeroIpv4FlowTuple
{
  ProtobufCMessage base;
  uint32_t source_ipv4;
  uint32_t destination_ipv4;
  uint32_t transport;
  uint32_t source_port;
  uint32_t destination_port;
  uint64_t count;
};
#define GATEKEEPER__HERO_STATS__HERO_IPV4_FLOW_TUPLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gatekeeper__hero_stats__hero_ipv4_flow_tuple__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


/*
 * IPv6 tuple stats
 */
struct  _Gatekeeper__HeroStats__HeroIpv6FlowTuple
{
  ProtobufCMessage base;
  ProtobufCBinaryData source_ipv6;
  ProtobufCBinaryData destination_ipv6;
  uint32_t transport;
  uint32_t source_port;
  uint32_t destination_port;
  uint64_t count;
};
#define GATEKEEPER__HERO_STATS__HERO_IPV6_FLOW_TUPLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gatekeeper__hero_stats__hero_ipv6_flow_tuple__descriptor) \
    , {0,NULL}, {0,NULL}, 0, 0, 0, 0 }


struct  _Gatekeeper__HeroStats__HeroStats
{
  ProtobufCMessage base;
  ProtobufCBinaryData device_id;
  Gatekeeper__HeroStats__HeroActions action;
  uint32_t category_id;
  char *policy;
  uint64_t last_access_ts;
  Gatekeeper__HeroStats__HeroDirections direction;
  Gatekeeper__HeroStats__HeroHostname *hostname;
  Gatekeeper__HeroStats__HeroUrl *url;
  Gatekeeper__HeroStats__HeroIpv4 *ipv4;
  Gatekeeper__HeroStats__HeroIpv6 *ipv6;
  Gatekeeper__HeroStats__HeroApp *app;
  Gatekeeper__HeroStats__HeroIpv4FlowTuple *ipv4_tuple;
  Gatekeeper__HeroStats__HeroIpv6FlowTuple *ipv6_tuple;
};
#define GATEKEEPER__HERO_STATS__HERO_STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gatekeeper__hero_stats__hero_stats__descriptor) \
    , {0,NULL}, GATEKEEPER__HERO_STATS__HERO_ACTIONS__HERO_ACTION_UNSPECIFIED, 0, (char *)protobuf_c_empty_string, 0, GATEKEEPER__HERO_STATS__HERO_DIRECTIONS__HERO_DIR_UNSPECIFIED, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


struct  _Gatekeeper__HeroStats__HeroObservationWindow
{
  ProtobufCMessage base;
  uint64_t started_at;
  uint64_t ended_at;
  size_t n_hero_stats;
  Gatekeeper__HeroStats__HeroStats **hero_stats;
};
#define GATEKEEPER__HERO_STATS__HERO_OBSERVATION_WINDOW__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gatekeeper__hero_stats__hero_observation_window__descriptor) \
    , 0, 0, 0,NULL }


struct  _Gatekeeper__HeroStats__HeroReport
{
  ProtobufCMessage base;
  uint64_t reported_at;
  Gatekeeper__HeroStats__HeroObservationPoint *observation_point;
  size_t n_observation_window;
  Gatekeeper__HeroStats__HeroObservationWindow **observation_window;
};
#define GATEKEEPER__HERO_STATS__HERO_REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gatekeeper__hero_stats__hero_report__descriptor) \
    , 0, NULL, 0,NULL }


/* Gatekeeper__HeroStats__HeroObservationPoint methods */
void   gatekeeper__hero_stats__hero_observation_point__init
                     (Gatekeeper__HeroStats__HeroObservationPoint         *message);
size_t gatekeeper__hero_stats__hero_observation_point__get_packed_size
                     (const Gatekeeper__HeroStats__HeroObservationPoint   *message);
size_t gatekeeper__hero_stats__hero_observation_point__pack
                     (const Gatekeeper__HeroStats__HeroObservationPoint   *message,
                      uint8_t             *out);
size_t gatekeeper__hero_stats__hero_observation_point__pack_to_buffer
                     (const Gatekeeper__HeroStats__HeroObservationPoint   *message,
                      ProtobufCBuffer     *buffer);
Gatekeeper__HeroStats__HeroObservationPoint *
       gatekeeper__hero_stats__hero_observation_point__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gatekeeper__hero_stats__hero_observation_point__free_unpacked
                     (Gatekeeper__HeroStats__HeroObservationPoint *message,
                      ProtobufCAllocator *allocator);
/* Gatekeeper__HeroStats__HeroHostname methods */
void   gatekeeper__hero_stats__hero_hostname__init
                     (Gatekeeper__HeroStats__HeroHostname         *message);
size_t gatekeeper__hero_stats__hero_hostname__get_packed_size
                     (const Gatekeeper__HeroStats__HeroHostname   *message);
size_t gatekeeper__hero_stats__hero_hostname__pack
                     (const Gatekeeper__HeroStats__HeroHostname   *message,
                      uint8_t             *out);
size_t gatekeeper__hero_stats__hero_hostname__pack_to_buffer
                     (const Gatekeeper__HeroStats__HeroHostname   *message,
                      ProtobufCBuffer     *buffer);
Gatekeeper__HeroStats__HeroHostname *
       gatekeeper__hero_stats__hero_hostname__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gatekeeper__hero_stats__hero_hostname__free_unpacked
                     (Gatekeeper__HeroStats__HeroHostname *message,
                      ProtobufCAllocator *allocator);
/* Gatekeeper__HeroStats__HeroUrl methods */
void   gatekeeper__hero_stats__hero_url__init
                     (Gatekeeper__HeroStats__HeroUrl         *message);
size_t gatekeeper__hero_stats__hero_url__get_packed_size
                     (const Gatekeeper__HeroStats__HeroUrl   *message);
size_t gatekeeper__hero_stats__hero_url__pack
                     (const Gatekeeper__HeroStats__HeroUrl   *message,
                      uint8_t             *out);
size_t gatekeeper__hero_stats__hero_url__pack_to_buffer
                     (const Gatekeeper__HeroStats__HeroUrl   *message,
                      ProtobufCBuffer     *buffer);
Gatekeeper__HeroStats__HeroUrl *
       gatekeeper__hero_stats__hero_url__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gatekeeper__hero_stats__hero_url__free_unpacked
                     (Gatekeeper__HeroStats__HeroUrl *message,
                      ProtobufCAllocator *allocator);
/* Gatekeeper__HeroStats__HeroIpv4 methods */
void   gatekeeper__hero_stats__hero_ipv4__init
                     (Gatekeeper__HeroStats__HeroIpv4         *message);
size_t gatekeeper__hero_stats__hero_ipv4__get_packed_size
                     (const Gatekeeper__HeroStats__HeroIpv4   *message);
size_t gatekeeper__hero_stats__hero_ipv4__pack
                     (const Gatekeeper__HeroStats__HeroIpv4   *message,
                      uint8_t             *out);
size_t gatekeeper__hero_stats__hero_ipv4__pack_to_buffer
                     (const Gatekeeper__HeroStats__HeroIpv4   *message,
                      ProtobufCBuffer     *buffer);
Gatekeeper__HeroStats__HeroIpv4 *
       gatekeeper__hero_stats__hero_ipv4__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gatekeeper__hero_stats__hero_ipv4__free_unpacked
                     (Gatekeeper__HeroStats__HeroIpv4 *message,
                      ProtobufCAllocator *allocator);
/* Gatekeeper__HeroStats__HeroIpv6 methods */
void   gatekeeper__hero_stats__hero_ipv6__init
                     (Gatekeeper__HeroStats__HeroIpv6         *message);
size_t gatekeeper__hero_stats__hero_ipv6__get_packed_size
                     (const Gatekeeper__HeroStats__HeroIpv6   *message);
size_t gatekeeper__hero_stats__hero_ipv6__pack
                     (const Gatekeeper__HeroStats__HeroIpv6   *message,
                      uint8_t             *out);
size_t gatekeeper__hero_stats__hero_ipv6__pack_to_buffer
                     (const Gatekeeper__HeroStats__HeroIpv6   *message,
                      ProtobufCBuffer     *buffer);
Gatekeeper__HeroStats__HeroIpv6 *
       gatekeeper__hero_stats__hero_ipv6__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gatekeeper__hero_stats__hero_ipv6__free_unpacked
                     (Gatekeeper__HeroStats__HeroIpv6 *message,
                      ProtobufCAllocator *allocator);
/* Gatekeeper__HeroStats__HeroApp methods */
void   gatekeeper__hero_stats__hero_app__init
                     (Gatekeeper__HeroStats__HeroApp         *message);
size_t gatekeeper__hero_stats__hero_app__get_packed_size
                     (const Gatekeeper__HeroStats__HeroApp   *message);
size_t gatekeeper__hero_stats__hero_app__pack
                     (const Gatekeeper__HeroStats__HeroApp   *message,
                      uint8_t             *out);
size_t gatekeeper__hero_stats__hero_app__pack_to_buffer
                     (const Gatekeeper__HeroStats__HeroApp   *message,
                      ProtobufCBuffer     *buffer);
Gatekeeper__HeroStats__HeroApp *
       gatekeeper__hero_stats__hero_app__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gatekeeper__hero_stats__hero_app__free_unpacked
                     (Gatekeeper__HeroStats__HeroApp *message,
                      ProtobufCAllocator *allocator);
/* Gatekeeper__HeroStats__HeroIpv4FlowTuple methods */
void   gatekeeper__hero_stats__hero_ipv4_flow_tuple__init
                     (Gatekeeper__HeroStats__HeroIpv4FlowTuple         *message);
size_t gatekeeper__hero_stats__hero_ipv4_flow_tuple__get_packed_size
                     (const Gatekeeper__HeroStats__HeroIpv4FlowTuple   *message);
size_t gatekeeper__hero_stats__hero_ipv4_flow_tuple__pack
                     (const Gatekeeper__HeroStats__HeroIpv4FlowTuple   *message,
                      uint8_t             *out);
size_t gatekeeper__hero_stats__hero_ipv4_flow_tuple__pack_to_buffer
                     (const Gatekeeper__HeroStats__HeroIpv4FlowTuple   *message,
                      ProtobufCBuffer     *buffer);
Gatekeeper__HeroStats__HeroIpv4FlowTuple *
       gatekeeper__hero_stats__hero_ipv4_flow_tuple__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gatekeeper__hero_stats__hero_ipv4_flow_tuple__free_unpacked
                     (Gatekeeper__HeroStats__HeroIpv4FlowTuple *message,
                      ProtobufCAllocator *allocator);
/* Gatekeeper__HeroStats__HeroIpv6FlowTuple methods */
void   gatekeeper__hero_stats__hero_ipv6_flow_tuple__init
                     (Gatekeeper__HeroStats__HeroIpv6FlowTuple         *message);
size_t gatekeeper__hero_stats__hero_ipv6_flow_tuple__get_packed_size
                     (const Gatekeeper__HeroStats__HeroIpv6FlowTuple   *message);
size_t gatekeeper__hero_stats__hero_ipv6_flow_tuple__pack
                     (const Gatekeeper__HeroStats__HeroIpv6FlowTuple   *message,
                      uint8_t             *out);
size_t gatekeeper__hero_stats__hero_ipv6_flow_tuple__pack_to_buffer
                     (const Gatekeeper__HeroStats__HeroIpv6FlowTuple   *message,
                      ProtobufCBuffer     *buffer);
Gatekeeper__HeroStats__HeroIpv6FlowTuple *
       gatekeeper__hero_stats__hero_ipv6_flow_tuple__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gatekeeper__hero_stats__hero_ipv6_flow_tuple__free_unpacked
                     (Gatekeeper__HeroStats__HeroIpv6FlowTuple *message,
                      ProtobufCAllocator *allocator);
/* Gatekeeper__HeroStats__HeroStats methods */
void   gatekeeper__hero_stats__hero_stats__init
                     (Gatekeeper__HeroStats__HeroStats         *message);
size_t gatekeeper__hero_stats__hero_stats__get_packed_size
                     (const Gatekeeper__HeroStats__HeroStats   *message);
size_t gatekeeper__hero_stats__hero_stats__pack
                     (const Gatekeeper__HeroStats__HeroStats   *message,
                      uint8_t             *out);
size_t gatekeeper__hero_stats__hero_stats__pack_to_buffer
                     (const Gatekeeper__HeroStats__HeroStats   *message,
                      ProtobufCBuffer     *buffer);
Gatekeeper__HeroStats__HeroStats *
       gatekeeper__hero_stats__hero_stats__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gatekeeper__hero_stats__hero_stats__free_unpacked
                     (Gatekeeper__HeroStats__HeroStats *message,
                      ProtobufCAllocator *allocator);
/* Gatekeeper__HeroStats__HeroObservationWindow methods */
void   gatekeeper__hero_stats__hero_observation_window__init
                     (Gatekeeper__HeroStats__HeroObservationWindow         *message);
size_t gatekeeper__hero_stats__hero_observation_window__get_packed_size
                     (const Gatekeeper__HeroStats__HeroObservationWindow   *message);
size_t gatekeeper__hero_stats__hero_observation_window__pack
                     (const Gatekeeper__HeroStats__HeroObservationWindow   *message,
                      uint8_t             *out);
size_t gatekeeper__hero_stats__hero_observation_window__pack_to_buffer
                     (const Gatekeeper__HeroStats__HeroObservationWindow   *message,
                      ProtobufCBuffer     *buffer);
Gatekeeper__HeroStats__HeroObservationWindow *
       gatekeeper__hero_stats__hero_observation_window__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gatekeeper__hero_stats__hero_observation_window__free_unpacked
                     (Gatekeeper__HeroStats__HeroObservationWindow *message,
                      ProtobufCAllocator *allocator);
/* Gatekeeper__HeroStats__HeroReport methods */
void   gatekeeper__hero_stats__hero_report__init
                     (Gatekeeper__HeroStats__HeroReport         *message);
size_t gatekeeper__hero_stats__hero_report__get_packed_size
                     (const Gatekeeper__HeroStats__HeroReport   *message);
size_t gatekeeper__hero_stats__hero_report__pack
                     (const Gatekeeper__HeroStats__HeroReport   *message,
                      uint8_t             *out);
size_t gatekeeper__hero_stats__hero_report__pack_to_buffer
                     (const Gatekeeper__HeroStats__HeroReport   *message,
                      ProtobufCBuffer     *buffer);
Gatekeeper__HeroStats__HeroReport *
       gatekeeper__hero_stats__hero_report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gatekeeper__hero_stats__hero_report__free_unpacked
                     (Gatekeeper__HeroStats__HeroReport *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Gatekeeper__HeroStats__HeroObservationPoint_Closure)
                 (const Gatekeeper__HeroStats__HeroObservationPoint *message,
                  void *closure_data);
typedef void (*Gatekeeper__HeroStats__HeroHostname_Closure)
                 (const Gatekeeper__HeroStats__HeroHostname *message,
                  void *closure_data);
typedef void (*Gatekeeper__HeroStats__HeroUrl_Closure)
                 (const Gatekeeper__HeroStats__HeroUrl *message,
                  void *closure_data);
typedef void (*Gatekeeper__HeroStats__HeroIpv4_Closure)
                 (const Gatekeeper__HeroStats__HeroIpv4 *message,
                  void *closure_data);
typedef void (*Gatekeeper__HeroStats__HeroIpv6_Closure)
                 (const Gatekeeper__HeroStats__HeroIpv6 *message,
                  void *closure_data);
typedef void (*Gatekeeper__HeroStats__HeroApp_Closure)
                 (const Gatekeeper__HeroStats__HeroApp *message,
                  void *closure_data);
typedef void (*Gatekeeper__HeroStats__HeroIpv4FlowTuple_Closure)
                 (const Gatekeeper__HeroStats__HeroIpv4FlowTuple *message,
                  void *closure_data);
typedef void (*Gatekeeper__HeroStats__HeroIpv6FlowTuple_Closure)
                 (const Gatekeeper__HeroStats__HeroIpv6FlowTuple *message,
                  void *closure_data);
typedef void (*Gatekeeper__HeroStats__HeroStats_Closure)
                 (const Gatekeeper__HeroStats__HeroStats *message,
                  void *closure_data);
typedef void (*Gatekeeper__HeroStats__HeroObservationWindow_Closure)
                 (const Gatekeeper__HeroStats__HeroObservationWindow *message,
                  void *closure_data);
typedef void (*Gatekeeper__HeroStats__HeroReport_Closure)
                 (const Gatekeeper__HeroStats__HeroReport *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    gatekeeper__hero_stats__hero_actions__descriptor;
extern const ProtobufCEnumDescriptor    gatekeeper__hero_stats__hero_directions__descriptor;
extern const ProtobufCMessageDescriptor gatekeeper__hero_stats__hero_observation_point__descriptor;
extern const ProtobufCMessageDescriptor gatekeeper__hero_stats__hero_hostname__descriptor;
extern const ProtobufCMessageDescriptor gatekeeper__hero_stats__hero_url__descriptor;
extern const ProtobufCMessageDescriptor gatekeeper__hero_stats__hero_ipv4__descriptor;
extern const ProtobufCMessageDescriptor gatekeeper__hero_stats__hero_ipv6__descriptor;
extern const ProtobufCMessageDescriptor gatekeeper__hero_stats__hero_app__descriptor;
extern const ProtobufCMessageDescriptor gatekeeper__hero_stats__hero_ipv4_flow_tuple__descriptor;
extern const ProtobufCMessageDescriptor gatekeeper__hero_stats__hero_ipv6_flow_tuple__descriptor;
extern const ProtobufCMessageDescriptor gatekeeper__hero_stats__hero_stats__descriptor;
extern const ProtobufCMessageDescriptor gatekeeper__hero_stats__hero_observation_window__descriptor;
extern const ProtobufCMessageDescriptor gatekeeper__hero_stats__hero_report__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_gatekeeper_5fhero_5fstats_2eproto__INCLUDED */
